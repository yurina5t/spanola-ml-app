import re
from datetime import datetime
from typing import List, Optional
from abc import ABC, abstractmethod
from dataclasses import dataclass, field
from hashlib import sha256

REWARD_BY_DIFFICULTY = {
    "easy": 2.0,
    "medium": 3.0,
    "hard": 4.0,
}

@dataclass
class TransactionLog:
    """
    –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∏–ª–∏ —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤).

    –°–æ–¥–µ—Ä–∂–∏—Ç —Å—É–º–º—É, —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–∏—á–∏–Ω—É.
    """
    user_id: int
    amount: float
    operation: str  # 'credit' –∏–ª–∏ 'debit'
    reason: str
    timestamp: datetime = field(default_factory=datetime.now)

@dataclass
class PredictionLog:
    """
    –õ–æ–≥ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏, —Ç–µ–º–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
    """
    user_id: int
    model_name: str
    theme_name: str
    difficulty: str
    recommended_at: datetime = field(default_factory=datetime.now)

@dataclass
class Wallet:
    """
    –ö–æ—à–µ–ª—ë–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏ –≤–µ–¥—ë—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
    """
    user_id: int
    balance: float = 0.0
    transactions: List[TransactionLog] = field(default_factory=list)

    def add(self, amount: float, reason: str):
        self.balance += amount
        self.transactions.append(TransactionLog(self.user_id, amount, 'credit', reason))

    def deduct(self, amount: float, reason: str) -> bool:
        if self.balance >= amount:
            self.balance -= amount
            self.transactions.append(TransactionLog(self.user_id, -amount, 'debit', reason))
            return True
        return False


@dataclass
class User:
    """
    –ö–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.

    –•—Ä–∞–Ω–∏—Ç email, —Ö—ç—à –ø–∞—Ä–æ–ª—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ—à–µ–ª—ë–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    id: int
    email: str
    _password: str
    wallet: Wallet = field(init=False)
    completed_tasks: List['TaskLog'] = field(default_factory=list)
    prediction_history: List[PredictionLog] = field(default_factory=list)

    def __post_init__(self):
        self._validate_email()
        self._validate_password()
        self._password = sha256(self._password.encode()).hexdigest()
        self.wallet = Wallet(user_id=self.id)

    def _validate_email(self):
        pattern = re.compile(r'^[\w\.-]+@[\w\.-]+\.\w+$')
        if not pattern.match(self.email):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")

    def _validate_password(self):
        if len(self._password) < 8:
            raise ValueError("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤")

    def log_task(self, log: 'TaskLog'):
        self.completed_tasks.append(log)

    def log_prediction(self, log: PredictionLog):
        self.prediction_history.append(log)    


@dataclass
class Theme:
    """
    –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥—É–ª—å.

    –í–∫–ª—é—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã, —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (A1, A2 –∏ —Ç.–¥.), –±–∞–∑–æ–≤—ã–π –∏ –±–æ–Ω—É—Å–Ω—ã–µ –∫–æ–º–∏–∫—Å—ã.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π.
    """
    name: str
    level: str
    base_comic: str
    bonus_comics: List[str] = field(default_factory=list)

    def get_bonus_comic(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–æ–Ω—É—Å–Ω—ã–π –∫–æ–º–∏–∫—Å –∏–ª–∏ None."""
        return self.bonus_comics[0] if self.bonus_comics else None


@dataclass
class TaskResult:
    """
    –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.

    –°–æ–¥–µ—Ä–∂–∏—Ç —É—Ä–æ–≤–µ–Ω—å –∑–∞–¥–∞–Ω–∏—è, —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∫–æ–º–∏–∫—Å—É.
    """
    difficulty: str # "easy", "medium", "hard"
    vocabulary: List[str]
    explanation: str
    is_correct: bool = True


@dataclass
class TaskLog:
    """
    –õ–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.

    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è, —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –º–æ–¥–µ–ª—å –∏ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    user_id: int
    task_description: str
    result: TaskResult
    model_name: str
    credits_spent: float
    timestamp: datetime = field(default_factory=datetime.now)


class MLModel(ABC):
    """
    –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π.

    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ç–µ–º.
    """
    def __init__(self, name: str, cost: float):
        self.name = name
        self.cost = cost
    
    @abstractmethod
    def generate_task(self, theme: 'Theme', is_bonus: bool = False) -> 'TaskResult':
        raise NotImplementedError("–ú–µ—Ç–æ–¥ generate_task –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ")

    def recommend_theme(self, user: User, themes: List[Theme]) -> Theme:
        used = {log.result.explanation for log in user.completed_tasks}
        for theme in themes:
            if theme.name not in used:
                user.log_prediction(PredictionLog(
                    user_id=user.id,
                    model_name=self.name,
                    theme_name=theme.name,
                    difficulty=theme.level
                ))
                return theme
        fallback = themes[0]
        user.log_prediction(PredictionLog(
            user_id=user.id,
            model_name=self.name,
            theme_name=fallback.name,
            difficulty=fallback.level
        ))
        return fallback


class SpanishComicModel(MLModel):
    """
    –ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–º–∏–∫—Å–æ–≤.
    """
    def __init__(self):
        super().__init__(name="SpanishComicModel", cost=0.0) 

    def generate_task(self, theme: Theme, is_bonus: bool = False) -> TaskResult:
        comic_file = theme.base_comic if not is_bonus else theme.get_bonus_comic()
        if not comic_file:
            raise ValueError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ–Ω—É—Å–Ω—ã—Ö –∫–æ–º–∏–∫—Å–æ–≤ –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã")

        explanation = f"[easy]. –ö–æ–º–∏–∫—Å: {comic_file} | –¢–µ–º–∞: {theme.name} | –£—Ä–æ–≤–µ–Ω—å: {theme.level}"
        vocab = ["ser", "soy", "eres", "es"] if theme.name == "–≥–ª–∞–≥–æ–ª ser" else ["palabra", "nueva"]
        return TaskResult(difficulty="easy", vocabulary=vocab, explanation=explanation)

class GrammarModel(MLModel):
    def __init__(self):
        super().__init__(name="GrammarModel", cost=1.0)

    def generate_task(self, theme: Theme, is_bonus: bool = False) -> TaskResult:
        explanation = f"medium. –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ: {theme.name} | –£—Ä–æ–≤–µ–Ω—å: {theme.level}"
        vocab = ["el verbo", "la conjugaci√≥n", "el tiempo"]
        return TaskResult(difficulty="medium", vocabulary=vocab, explanation=explanation)

class VocabularyModel(MLModel):
    def __init__(self):
        super().__init__(name="VocabularyModel", cost=1.0)

    def generate_task(self, theme: Theme, is_bonus: bool = False) -> TaskResult:
        explanation = f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ –ª–µ–∫—Å–∏–∫—É –ø–æ —Ç–µ–º–µ: {theme.name} | –£—Ä–æ–≤–µ–Ω—å: {theme.level}"
        vocab = ["casa", "comida", "ropa"]
        return TaskResult(difficulty="medium", vocabulary=vocab, explanation=explanation)


@dataclass
class TaskRequest:
    """
    –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.

    –°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–µ–º—É, –º–æ–¥–µ–ª—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –∑–∞–¥–∞–Ω–∏—è (–±–∞–∑–æ–≤–æ–µ –∏–ª–∏ –±–æ–Ω—É—Å–Ω–æ–µ).
    """
    user: User
    model: MLModel
    theme: Theme
    is_bonus_comic: bool = False
    bonus_cost: float = 0.0

    def execute(self) -> TaskLog:
        if self.is_bonus_comic:
            if not self.user.wallet.deduct(self.bonus_cost, reason="bonus comic"):
                raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è")

        result = self.model.generate_task(self.theme, is_bonus=self.is_bonus_comic)
        log = TaskLog(
            user_id=self.user.id,
            task_description=f"{'–ë–æ–Ω—É—Å' if self.is_bonus_comic else '–ë–∞–∑–æ–≤–æ–µ'} –∑–∞–¥–∞–Ω–∏–µ: {self.theme.name}",
            result=result,
            model_name=self.model.name,
            credits_spent=self.bonus_cost if self.is_bonus_comic else 0.0
        )
        self.user.log_task(log)
        print(f"\n‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ {'–±–æ–Ω—É—Å–Ω–æ–µ' if self.is_bonus_comic else '–±–∞–∑–æ–≤–æ–µ'} –∑–∞–¥–∞–Ω–∏–µ: {result.explanation}")

        if result.is_correct and not self.is_bonus_comic:
            reward = REWARD_BY_DIFFICULTY.get(result.difficulty, 3.0)
            self.user.wallet.add(reward, reason="—É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")
            print(f"üí° –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–∞–ª–ª–æ–≤: {reward} (—Å–ª–æ–∂–Ω–æ—Å—Ç—å: {result.difficulty}), —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {self.user.wallet.balance}")
        return log


class Admin(User):
    """
    –ö–ª–∞—Å—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    –ú–æ–∂–µ—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    def __init__(self, id: int, email: str, password: str):
        super().__init__(id, email, password)

    def top_up_user(self, user: User, amount: float):
        user.wallet.add(amount, reason="admin top-up" )

    def view_all_logs(self, users: List[User]) -> List[TaskLog]:
        logs = []
        for u in users:
            logs.extend(u.completed_tasks)
        return logs


def main():
    try:
        user = User(id=1, email="nuevo@correo.es", _password="superclave123")
        print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.email}, –±–∞–ª–∞–Ω—Å: {user.wallet.balance} –±–∞–ª–ª–æ–≤")

        themes = [
            Theme(name="–≥–ª–∞–≥–æ–ª ser", level="A1", base_comic="comic_ser_base.jpg", bonus_comics=["comic_ser_bonus1.jpg"]),
            Theme(name="–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ", level="A1", base_comic="comic_adj_base.jpg")
        ]

        model = GrammarModel()
        recommended = model.recommend_theme(user, themes)

        base_task = TaskRequest(user=user, model=model, theme=recommended, is_bonus_comic=False)
        base_log = base_task.execute()

        bonus_cost = 2.0
        print(f"\nüéÅ –î–æ—Å—Ç—É–ø–µ–Ω –±–æ–Ω—É—Å–Ω—ã–π –∫–æ–º–∏–∫—Å –Ω–∞ —ç—Ç—É —Ç–µ–º—É! –°—Ç–æ–∏–º–æ—Å—Ç—å: {bonus_cost} –±–∞–ª–ª–∞")
        bonus_task = TaskRequest(user=user, model=model, theme=recommended, is_bonus_comic=True, bonus_cost=bonus_cost)
        bonus_log = bonus_task.execute()
        
        print(f"üíé –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: {user.wallet.balance} –±–∞–ª–ª–æ–≤")

        print("\nüß† –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
        for rec in user.prediction_history:
            print(f"  ‚Üí {rec.model_name} —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª: {rec.theme_name} ({rec.difficulty}) –≤ {rec.recommended_at}")

    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
