import re
from datetime import datetime
from typing import List, Optional
from abc import ABC, abstractmethod
from dataclasses import dataclass, field



@dataclass
class User:
    """
    –ö–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.
    
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è, –ø–æ–ª—É—á–∞—Ç—å –±–∞–ª–ª—ã, —Ç—Ä–∞—Ç–∏—Ç—å –∏—Ö
    –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∏–∫—Å—ã –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.
    """
    id: int
    email: str
    password: str
    balance: float = 0.0
    completed_tasks: List['TaskLog'] = field(default_factory=list)

    def __post_init__(self):
        self._validate_email()
        self._validate_password()

    def _validate_email(self):
        pattern = re.compile(r'^[\w\.-]+@[\w\.-]+\.\w+$')
        if not pattern.match(self.email):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")

    def _validate_password(self):
        if len(self.password) < 8:
            raise ValueError("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤")

    def add_credits(self, amount: float) -> None:
        self.balance += amount

    def deduct_credits(self, amount: float) -> bool:
        if self.balance >= amount:
            self.balance -= amount
            return True
        return False

    def log_task(self, log: 'TaskLog'):
        self.completed_tasks.append(log)


@dataclass
class Theme:
    """
    –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥—É–ª—å.

    –í–∫–ª—é—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã, —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (A1, A2 –∏ —Ç.–¥.), –±–∞–∑–æ–≤—ã–π –∏ –±–æ–Ω—É—Å–Ω—ã–µ –∫–æ–º–∏–∫—Å—ã.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π.
    """
    name: str
    level: str
    base_comic: str
    bonus_comics: List[str] = field(default_factory=list)

    def get_bonus_comic(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–æ–Ω—É—Å–Ω—ã–π –∫–æ–º–∏–∫—Å –∏–ª–∏ None."""
        return self.bonus_comics[0] if self.bonus_comics else None


@dataclass
class TaskResult:
    """
    –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è.

    –°–æ–¥–µ—Ä–∂–∏—Ç —É—Ä–æ–≤–µ–Ω—å –∑–∞–¥–∞–Ω–∏—è, —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∫–æ–º–∏–∫—Å—É.
    """
    difficulty: str
    vocabulary: List[str]
    explanation: str


@dataclass
class TaskLog:
    """
    –õ–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.

    –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, —Ç–µ–º–µ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –±–∞–ª–ª–∞—Ö.
    """
    user_id: int
    task_description: str
    result: TaskResult
    model_name: str
    credits_spent: float
    timestamp: datetime = field(default_factory=datetime.now)


class MLModel(ABC):
    """
    –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π.

    –û—Ç –Ω–µ—ë –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–µ –º–µ—Ç–æ–¥ generate_task,
    –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –æ–±—ä–µ–∫—Ç Theme –∏ —Ñ–ª–∞–≥ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.
    """
    def __init__(self, name: str, cost: float):
        self.name = name
        self.cost = cost
    
    @abstractmethod
    def generate_task(self, theme: 'Theme', is_bonus: bool = False) -> 'TaskResult':
        raise NotImplementedError("–ú–µ—Ç–æ–¥ generate_task –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ")


class SpanishComicModel(MLModel):
    """
    –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ML-–º–æ–¥–µ–ª–∏.

    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º—ã –∏ —É—Ä–æ–≤–Ω—è.
    """
    def __init__(self):
        super().__init__(name="SpanishComicModel", cost=0.0) 

    def generate_task(self, theme: Theme, is_bonus: bool = False) -> TaskResult:
        comic_file = theme.base_comic if not is_bonus else theme.get_bonus_comic()
        if not comic_file:
            raise ValueError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ–Ω—É—Å–Ω—ã—Ö –∫–æ–º–∏–∫—Å–æ–≤ –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã")

        explanation = f"–ö–æ–º–∏–∫—Å: {comic_file} | –¢–µ–º–∞: {theme.name} | –£—Ä–æ–≤–µ–Ω—å: {theme.level}"
        vocab = ["ser", "soy", "eres", "es"] if theme.name == "–≥–ª–∞–≥–æ–ª ser" else ["palabra", "nueva"]
        return TaskResult(difficulty=theme.level, vocabulary=vocab, explanation=explanation)



@dataclass
class TaskRequest:
    """
    –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.

    –°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–µ–º—É, –º–æ–¥–µ–ª—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –∑–∞–¥–∞–Ω–∏—è (–±–∞–∑–æ–≤–æ–µ –∏–ª–∏ –±–æ–Ω—É—Å–Ω–æ–µ).
    """
    user: User
    model: MLModel
    theme: Theme
    is_bonus_comic: bool = False
    bonus_cost: float = 0.0

    def execute(self) -> TaskLog:
        if self.is_bonus_comic:
            if not self.user.deduct_credits(self.bonus_cost):
                raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è")

        result = self.model.generate_task(self.theme, is_bonus=self.is_bonus_comic)
        log = TaskLog(
            user_id=self.user.id,
            task_description=f"{'–ë–æ–Ω—É—Å' if self.is_bonus_comic else '–ë–∞–∑–æ–≤–æ–µ'} –∑–∞–¥–∞–Ω–∏–µ: {self.theme.name}",
            result=result,
            model_name=self.model.name,
            credits_spent=self.bonus_cost if self.is_bonus_comic else 0.0
        )
        self.user.log_task(log)
        return log


class Admin(User):
    """
    –ö–ª–∞—Å—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    –ú–æ–∂–µ—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ –ª–æ–≥–∏.
    """
    def __init__(self, id: int, email: str, password: str):
        super().__init__(id, email, password)

    def top_up_user(self, user: User, amount: float):
        user.add_credits(amount)

    def view_all_logs(self, users: List[User]) -> List[TaskLog]:
        logs = []
        for u in users:
            logs.extend(u.completed_tasks)
        return logs


def main():
    try:
        # 1.–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(id=1, email="nuevo@correo.es", password="superclave123")
        print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.email}, –±–∞–ª–∞–Ω—Å: {user.balance} –±–∞–ª–ª–æ–≤")

        # 2.–ó–∞–¥–∞—ë–º —Ç–µ–º—É
        ser_theme = Theme(
            name="–≥–ª–∞–≥–æ–ª ser",
            level="A1",
            base_comic="comic_ser_base.jpg",
            bonus_comics=["comic_ser_bonus1.jpg"]
        )

        # 3.–ú–æ–¥–µ–ª—å
        model = SpanishComicModel()

        # 4.–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        base_task = TaskRequest(user=user, model=model, theme=ser_theme, is_bonus_comic=False)
        base_log = base_task.execute()
        print(f"\n‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ –±–∞–∑–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {base_log.result.explanation}")

        # 5.–ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
        reward_points = 3.0
        user.add_credits(reward_points)
        print(f"üéÅ –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–∞–ª–ª–æ–≤: {reward_points}, —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance}")

        # 6.–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–π –∫–æ–º–∏–∫—Å
        bonus_cost = 2.0
        print("\nüí° –î–æ—Å—Ç—É–ø–µ–Ω –±–æ–Ω—É—Å–Ω—ã–π –∫–æ–º–∏–∫—Å –Ω–∞ —ç—Ç—É —Ç–µ–º—É!")
        bonus_task = TaskRequest(user=user, model=model, theme=ser_theme, is_bonus_comic=True, bonus_cost=bonus_cost)
        bonus_log = bonus_task.execute()
        print(f"\nüîÆ –ü—Ä–æ–π–¥–µ–Ω –±–æ–Ω—É—Å–Ω—ã–π –∫–æ–º–∏–∫—Å: {bonus_log.result.explanation}")
        print(f"üíé –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: {user.balance} –±–∞–ª–ª–æ–≤")

    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")



if __name__ == "__main__":
    main()
