services:
  app:
    build: .
    image: spanola:latest
    container_name: spanola
    restart: unless-stopped
    env_file:
      - ./app/.env
    volumes:
      - ./app:/app
    networks:
      - spanola-network
    ports:
      - "8000:8000"
    environment:
      - USE_OLLAMA=1
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_MODEL=${OLLAMA_MODEL}
    depends_on:
      rabbitmq:
        condition: service_started
      database:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  web-proxy:
    image: nginx:stable-perl
    container_name: spanola-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      app:
        condition: service_healthy
    volumes:
      - ./web-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
    networks:
      - spanola-network

  rabbitmq:
    image: rabbitmq:3.13.7-management-alpine
    container_name: spanola-rabbitmq
    restart: on-failure
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - spanola-network
      
  worker-comic:
    image: spanola:latest
    container_name: spanola-worker-comic
    restart: unless-stopped
    env_file:
      - ./app/.env
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - USE_OLLAMA=1
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_MODEL=${OLLAMA_MODEL}
    command: ["python", "-m", "workers.worker_comic"]
    volumes:
      - ./app:/app
    depends_on:
      rabbitmq:
        condition: service_started
      database:
        condition: service_healthy
      ollama:
        condition: service_healthy
      ollama-pull:
        condition: service_completed_successfully
    networks:
      - spanola-network

  worker-grammar:
    image: spanola:latest
    container_name: spanola-worker-grammar
    restart: unless-stopped
    env_file:
      - ./app/.env
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - USE_OLLAMA=1
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_MODEL=${OLLAMA_MODEL}
    command: ["python", "-m", "workers.worker_grammar"]
    volumes:
      - ./app:/app
    depends_on:
      rabbitmq:
        condition: service_started
      database:
        condition: service_healthy
      ollama:
        condition: service_healthy
      ollama-pull:
        condition: service_completed_successfully
    networks:
      - spanola-network

  worker-vocab:
    image: spanola:latest
    container_name: spanola-worker-vocab
    restart: unless-stopped
    env_file:
      - ./app/.env
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - USE_OLLAMA=1
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_MODEL=${OLLAMA_MODEL}
    command: ["python", "-m", "workers.worker_vocab"]
    volumes:
      - ./app:/app
    depends_on:
      rabbitmq:
        condition: service_started
      database:
        condition: service_healthy
      ollama:
        condition: service_healthy
      ollama-pull:
        condition: service_completed_successfully
    networks:
      - spanola-network

  database:
    image: postgres:latest
    container_name: spanola-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}  
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - spanola-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  ollama:
    image: ollama/ollama:latest
    container_name: spanola-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"          
    volumes:
      - ollama_data:/root/.ollama
    environment:
       - OLLAMA_KEEP_ALIVE=5m
    networks:
      - spanola-network
    healthcheck:
      #test: ["CMD", "ollama", "list", "--host", "127.0.0.1:11434"]
      test: ["CMD", "/bin/ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 20
      start_period: 180s
  ollama-pull:
    image: ollama/ollama:latest
    container_name: spanola-ollama-pull
    depends_on:
      ollama:
        condition: service_healthy
    environment:
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_MODEL=${OLLAMA_MODEL}
    networks:
      - spanola-network
    entrypoint: ["/bin/sh","-lc","ollama pull ${OLLAMA_MODEL}"]
    restart: "no"
    
networks:
  spanola-network:
    name: spanola-network
    driver: bridge

volumes:
  rabbitmq_data:
  postgres_data:
  ollama_data: