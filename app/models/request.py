from dataclasses import dataclass
from .user import User
from .logs import TaskLog, TransactionLog, TransactionHistory
from .theme import Theme
from .models import MLModel
from .wallet import Wallet

REWARD_BY_DIFFICULTY = {
    "easy": 2.0,
    "medium": 3.0,
    "hard": 4.0,
}

@dataclass
class TaskRequest:
    """
    –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.
    –°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–µ–º—É, –º–æ–¥–µ–ª—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –∑–∞–¥–∞–Ω–∏—è (–±–∞–∑–æ–≤–æ–µ –∏–ª–∏ –±–æ–Ω—É—Å–Ω–æ–µ).
    """
    user: User
    model: MLModel
    theme: Theme
    wallet: Wallet
    transactions: TransactionHistory
    is_bonus_comic: bool = False
    bonus_cost: float = 0.0

    def execute(self) -> TaskLog:
        if self.is_bonus_comic:
            if not self.wallet.deduct(self.bonus_cost):
                raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
            self.transactions.log(TransactionLog(self.user.id, -self.bonus_cost, 'debit', "bonus comic"))

        result = self.model.generate_task(self.theme, is_bonus=self.is_bonus_comic)
        log = TaskLog(
            user_id=self.user.id,
            task_description=f"{'–ë–æ–Ω—É—Å' if self.is_bonus_comic else '–ë–∞–∑–æ–≤–æ–µ'} –∑–∞–¥–∞–Ω–∏–µ: {self.theme.name}",
            result=result,
            model_name=self.model.name,
            credits_spent=self.bonus_cost if self.is_bonus_comic else 0.0
        )
        self.user.log_task(log)
        print(f"\n‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ {'–±–æ–Ω—É—Å–Ω–æ–µ' if self.is_bonus_comic else '–±–∞–∑–æ–≤–æ–µ'} –∑–∞–¥–∞–Ω–∏–µ: {result.explanation}")

        if result.is_correct and not self.is_bonus_comic:
            reward = REWARD_BY_DIFFICULTY.get(result.difficulty, 3.0)
            self.wallet.add(reward) #, reason="—É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")
            self.transactions.log(TransactionLog(self.user.id, reward, 'credit', "—É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"))
            print(f"üí° –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–∞–ª–ª–æ–≤: {reward} (—Å–ª–æ–∂–Ω–æ—Å—Ç—å: {result.difficulty}), —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {self.user.wallet.balance}")
        return log
